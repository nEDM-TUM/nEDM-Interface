{
  "_id"  : "master_control",
  "type" : "control",
  "title" : "Raspberry Controls",
  "description" : """
Control the Rasp Pis
<br><br>
For more information on writing the code, see the relevant section
of the <a href="https://github.com/nEDM-TUM/HimbeereCouch#running-code">GitHub page</a>.
""",
  "predef_cmds" : {
    "Shutdown" : [ "poweroff" ],
    "Restart" : [ "shutdown", "-r", "now" ],
    "Reload dmn" : [ "service", "rspby", "reload" ],
    "User def" : ""
  },
  "code_template" : """
    <div align='left' data-role='collapsible' class='code_sample'>
       <h3><span class='doc_name'>(Not saved)</span></h3>
       <h5>Name:</h5>
       <input type='text' class='code_name' value='Unique name'>
       <h5>Saved: <span class='code_status'>(Not saved)</span></h5>
       <h5>Code:</h5>
       <div data-role='ui-field-contiain'>
         <div data-role='controlgroup' data-type='horizontal'>
           <select class='module_select'></select>
           <button class='remove_module'>Remove module</button>
         </div>
       </div>
       <div data-role='ui-field-contiain'>
         <div data-role='controlgroup' data-type='horizontal'>
           <button class='new_module'>New module with name:</button>
           <input type='text' data-wrapper-class='controlgroup-textinput ui-btn' class='input_val'/>
         </div>
       </div>
       <div data-role='ui-field-contiain'>
         <div data-role='controlgroup' data-type='horizontal'>
           <label><input type='checkbox' class='global_export'/>Export modules globally</label>
         </div>
       </div>

       <div class='code_editor'># Fill the following with python code</div>
       <div data-role='fieldcontain'>
         <fieldset data-role='controlgroup' data-type='horizontal'>
            <button class='ui-btn ui-corner-all save_code'>Save</button>
            <button class='ui-btn ui-corner-all remove_code'>Remove</button>
         </fieldset>
       </div>
    </div>
""",
  "html" : """
<div>
    <div>
        <div class='all_controls ui-disabled'>
          <div data-role='fieldcontain'>
            <fieldset data-role='controlgroup' data-type='horizontal'>
              <input type='text' data-wrapper-class='controlgroup-textinput ui-btn' class='input_mac'>
              <button class='ui-btn ui-corner-all submit_new_arduino'>Add new MAC ID</button>
              <button class='ui-btn ui-corner-all read_from_db'>Read from DB</button>
            </fieldset>
          </div>
          <div data-role='fieldcontain'>
            <fieldset data-role='controlgroup' data-type='horizontal'>
              <select class='arduino_select'></select>
              <button class='ui-btn ui-corner-all add_new_code'>Add script</button>
            </fieldset>
          </div>
          <div>
            <div class='ui-corner-all custom-corners send_cmd_all'>
                <div class='ui-bar ui-bar-a'>
                     <h3>Send command:</h3>
                </div>
                <div class='ui-body ui-body-a'>
                  <div data-role='fieldcontain'>
                    <fieldset data-role='controlgroup' data-type='horizontal'>
                      <select class='cmd_select'></select>
                      <input type='text' data-wrapper-class='controlgroup-textinput ui-btn' class='input_cmd'>
                      <button class='ui-btn ui-corner-all send_cmd'>Send</button>
                      <button class='ui-btn ui-corner-all stop_wait'>Stop waiting</button>
                    </fieldset>
                  </div>
                  <div align='left'>
                    <span class="bolded_font">Last output: </span><pre class="returned_output"></pre>
                    <span class="bolded_font">Last error: </span><pre class="returned_error"></pre>
                  </div>
                </div>
            </div>
            <div class='ui-corner-all custom-corners'>
                <div class='ui-bar ui-bar-a'>
                     <h3>Available scripts:</h3>
                </div>
                <div class='ui-body ui-body-a'>
                    <div data-role='collapsible-set' class='all_avail_code' data-inset='false'>
                    </div>
                </div>
            </div>
            <div class='ui-corner-all custom-corners'>
                <div class='ui-bar ui-bar-a'>
                     <h3>Log:</h3>
                </div>
                <div class='ui-body ui-body-a'>
                  <img src='/nedm_head/_design/nedm_head/css/images/light-loader-highres.gif' class='rspy_log_loading'>
                  <ul class='rspy_log'>
                  </ul>
                </div>
            </div>

          </div>

        </div>
        <div data-role="popup" id="arduinosConfirm" data-overlay-theme="a" data-theme="a"
          style="max-width:400px;" class="ui-corner-all" data-dismissible="false">
            <div data-role="header" data-theme="a" class="ui-corner-top">
                <h1>Delete script?</h1>
            </div>
            <div role="main" class="ui-corner-bottom ui-content">
                <h3 class="ui-title">Are you sure you want to delete this script?</h3>
                <p>This action cannot be undone.</p>
                <a href="#" class='cancel_button' data-role="button" data-inline="true" data-rel="back" data-theme="a">Cancel</a>
                <a href="#" class='delete_button' data-role="button" data-inline="true" data-rel="back" data-transition="flow" data-theme="b">Delete</a>
            </div>
        </div>
    </div>
</div>""",
"script" : """
    function(thediv, docobj) {
      var toastr = require("toastr");
      var to_clone = docobj.code_template.trim();
      var ac = $('.all_avail_code', $(thediv));
      var ard_select = $('.arduino_select', $(thediv)).filter(':input');
      var update_timeout;
      var submit_cmd_timeout;
      var this_db = nedm.get_database();

      function add_code_to_sel(sel, aname, code) {
         sel.append(
           $('<option/>').val(aname).text(aname).data( { code : code } ));
      }

      var update_div_with_code = function(new_code, adoc) {
          var sel = $('.module_select', $(new_code)).filter(':input');
          var k;
          if (adoc) {
             $('.code_name', $(new_code)).val(adoc.name);
             sel.empty();
             if (adoc.code) {
                add_code_to_sel(sel, "main", adoc.code);
             }
             if (adoc.global_modules) {
                $('.global_export', $(new_code)).prop("checked", true).checkboxradio("refresh");
                for (k in adoc.global_modules) {
                  add_code_to_sel(sel, k, adoc.global_modules[k]);
                }
             } else {
                $('.global_export', $(new_code)).prop("checked", false).checkboxradio("refresh");
             }
             if (adoc.modules) {
                for (k in adoc.modules) {
                  add_code_to_sel(sel, k, adoc.modules[k]);
                }
             }
             if ($(new_code).data('editor')) {
               $(new_code).data('editor').getSession().setValue(adoc.code);
             } else {
               $('.code_editor', $(new_code)).text(adoc.code);
             }
             $('.doc_name', $(new_code)).text(adoc.name || "Not defined");
             $('.code_status', $(new_code)).text("(id: " + adoc._id + ", rev: " + adoc._rev + ")");
             $(new_code).data({ doc : adoc });
          } else {
             // Make sure we have a main
             add_code_to_sel(sel, "main", "");
          }
          sel.val("main").trigger("change");
      };

      var submit_cmd = function(acmd, macid) {
         var ad = { cmd : acmd, type : macid.toString() + '_cmd' };
         var timeout = 0;
         $('.send_cmd', $(thediv)).addClass('ui-disabled');
         $('.stop_wait', $(thediv)).removeClass('ui-disabled');
         var check_doc = function(o) {
             var anid = o.id || o._id;
             return function() {
                 this_db.getDoc(anid, function(e, o) {
                    if (e) return;
                    if (!o.ret) {
                        submit_cmd_timeout = setTimeout(check_doc(o), 2000);
                    } else {
                        toastr.success("Responded", "Cmd response");
                        $('.returned_output', $(thediv)).text(o.ret[0]);
                        $('.returned_error', $(thediv)).text(o.ret[1]);
                        $('.send_cmd', $(thediv)).removeClass('ui-disabled');
                        $('.stop_wait', $(thediv)).addClass('ui-disabled');
                    }
                 });
           };
         };
         this_db.updateDoc(ad,
             'nedm_default',
             'insert_with_timestamp',
             function(e,o) {
               if (e) {
                 nedm.show_error_window("Server error",
                                          JSON.stringify(e));
               } else {
                 check_doc(o)();
               }
         });

      };
      var send_current_command = function(ev) {
         var mid = $('.arduino_select :selected').val();
         var the_cmd = $('.input_cmd', $(thediv)).val();
         try {
           the_cmd = JSON.parse(the_cmd);
         } catch(err) {
           // Ok, here we failed to get parsed
           the_cmd = the_cmd.split(" ");
         }
         if (!Array.isArray(the_cmd)) {
           the_cmd = [ the_cmd ];
         }
         submit_cmd(the_cmd, mid);

      };
      function add_module(ev) {
          var par = $(ev.currentTarget).parents('.code_sample');
          var module_name = $('.input_val', par).val().trim();
          var sel = $('.module_select', par);
          if (module_name.length === 0) {
            toastr.error("Name must have non-zero length", "Invalid name");
            return;
          }
          if (/\s/g.test(module_name)) {
            toastr.error("Name must not have whitespace", "Invalid name");
            return;
          }
          add_code_to_sel(sel, module_name, "");
          sel.val(module_name).trigger("change");
          $('.input_val', par).val('');
      }
      function remove_module(ev) {

      }
      function global_export_change(ev) {
          var par = $(ev.currentTarget).parents('.code_sample');
          if ($(ev.currentTarget).prop("checked") &&
              $(".module_select option[value='main']", par).length > 0) {
             toastr.warning("You have a 'main' module, this will be ignored if you wish to globally export the modules",
                            "Global export warning");
          }
      }
      function update_code_selection(ev) {
          var ct = $(ev.currentTarget);
          var par = ct.parents('.code_sample');
          var current_data = par.data('editor').getSession().getValue();
          var this_option = $(':selected', ct);
          if (ct.data('previous')) {
            ct.data('previous').data( { code : current_data } );
          }
          ct.data( { previous : this_option });
          par.data('editor').getSession().setValue( this_option.data('code') );
      }
      function focus_code_selection(ev) {
        var c = $(ev.currentTarget);
        c.data({ previous : $(':selected', $(c)) });
      }
      var add_new_code = function(ev, adoc, tag) {
          var new_code = $.parseHTML(to_clone);
          ac.append(new_code);
          ac.trigger('create');
          ac.collapsibleset('refresh');
          editor = ace.edit($('.code_editor', $(new_code))[0]);
          editor.getSession().setMode('ace/mode/python');
          editor.setTheme('ace/theme/xcode');

          $('.remove_code', $(new_code)).on('click', remove_code);
          $('.save_code', $(new_code)).on('click', save_code);
          $('.new_module', $(new_code)).on('click', add_module);
          $('.remove_module', $(new_code)).on('click', remove_module);
          $('.global_export', $(new_code)).on('change', global_export_change);
          $('.module_select', $(new_code)).on('change', update_code_selection);
          $('.module_select', $(new_code)).on('focus', focus_code_selection);
          $(new_code).data( { editor : editor,
                              tag : tag || $('.arduino_select :selected').val() });
          update_div_with_code( new_code, adoc);
      };
      var update_current_code = function(ev) {
          var selected_val = $(':selected', $(ev.currentTarget)).val();
          $('.all_avail_code').addClass('ui-disabled');
          $('.code_sample', $(ac)).each( function() {
              var o = $(this);
              var x = o.data('tag').toString();
              if (!x || x !== selected_val) {
                o.hide();
              } else {
                o.show();
              }
          });
          $('.all_avail_code').removeClass('ui-disabled');
          $('.rspy_log', $(thediv)).empty();
          $('.rspy_log_loading', $(thediv)).show();
          if (update_timeout) {
            clearTimeout(update_timeout);
          }
          update_log();
      };
      var remove_code = function(ev) {
          var par = $(ev.currentTarget).parents('.code_sample');
          par.addClass('ui-disabled');
          var cbck = function(o) {
             if (!o.delete) {
               par.removeClass('ui-disabled');
               return;
             }
             if (par.data('doc')) {
                 this_db.removeDoc(
                   par.data('doc'),
                   function(e,o) {
                       if(e) {
                         nedm.show_error_window(e.error, e.reason);
                         par.removeClass('ui-disabled');
                       } else {
                         toastr.info("Success", "Document: " + o.id + " removed");
                         par.remove();
                       }
                   });
             } else {
                 par.remove();
             }
          };
          $('#arduinosConfirm').data( { callback : cbck }).popup('open');
      };
      function save_current_code_to_option(ev) {
          var ct = $(ev.currentTarget);
          var par = ct.parents('.code_sample');
          var current_data = par.data('editor').getSession().getValue();
          var this_option = $(':selected', par);
          this_option.data( { code : current_data } );
      }
      var save_code = function(ev) {
          save_current_code_to_option(ev);
          var par = $(ev.currentTarget).parents('.code_sample');
          var global_export = $('.global_export', par).prop('checked');
          var all_code = $('.module_select > option', par).map( function() {
            return { name : $(this).val(), code : $(this).data('code') };
          }).toArray();
          var submit_doc = {};
          if (par.data('doc')) {
            submit_doc = JSON.parse(JSON.stringify(par.data('doc')));
          }
          submit_doc.name = $('.code_name', $(par)).val();
          submit_doc.type = parseInt(par.data('tag'));
          if (global_export) {
            ["code", "modules"].forEach(function(o) {
              if (submit_doc[o]) delete submit_doc[o];
            });
            submit_doc.global_modules = {};
            all_code.forEach(function(o) {
              if (o.name === 'main') return;
              submit_doc.global_modules[o.name] = o.code;
            });
          } else {
            ["global_modules"].forEach(function(o) {
              if (submit_doc[o]) delete submit_doc[o];
            });
            submit_doc.modules = {};
            all_code.forEach(function(o) {
              if (o.name === 'main') {
                submit_doc.code = o.code;
              } else {
                submit_doc.modules[o.name] = o.code; 
              }
            });
          } 
          var call_func = function(thedoc, cbck) {
            return this_db.updateDoc(thedoc,
                'nedm_default',
                'insert_with_timestamp',
                cbck);
          };
          if (par.data('doc')) {
            call_func = function(thedoc, cbck) {
              return this_db.saveDoc(thedoc, cbck);
            };
          }
          par.addClass('ui-disabled');
          call_func(submit_doc,
              function(e,o) {
                if (e) {
                    nedm.show_error_window("Server error",
                                           JSON.stringify(e));
                    par.removeClass('ui-disabled');
                } else {
                    this_db.getDoc(o.id,
                      function(x,y) {
                        par.removeClass('ui-disabled');
                        if (x) return;
                        update_div_with_code(par, y);
                        ac.collapsibleset('refresh');
                    });
                }
          });
      };
      var append_mac_id = function(macid) {
           var num = 0;
           var hexnum = "";
           if (typeof macid === 'number') {
               num = macid;
               hexnum = num.toString(16);
           } else {
               // check first if it's an integer already
               if (!isNaN(Number(macid))) {
                   num = parseInt(macid);
                   hexnum = num.toString(16);
               } else {
                   hexnum = macid;
                   num = parseInt(hexnum, 16);
               }
           }
           var thestr = hexnum.substr(0, 6);
           if (thestr === 'b827eb' || thestr === '48022a') {
               var o = $('<option/>').val(num).text(hexnum);
               ard_select.append(o);
               return true;
           }
           return false;
      };
      var read_from_db = function() {
        $('.all_controls').addClass('ui-disabled');
        ard_select.empty();
        $('.all_avail_code').empty();
        var add_code_from_view_results = function(e,o) {
            if (e) return;
            var r = o.rows;
            for (var i = 0;i<r.length;i++) {
                add_new_code(null, r[i].doc, r[i].doc.type);
            }
            update_current_code( { currentTarget : ard_select });
        };
        this_db
            .getView('document_type',
                     'document_type',
                     { opts :
                   {
                     reduce : false,
                     endkey : ['heartbeat'],
                     startkey : ['heartbeat', {}],
                     descending : true
                   } },
            function(e, o) {
              if (e !== null) return;
              var r = o.rows;
              for (var i = 0;i<r.length;i++) {
                  var k = r[i].id.split('_')[0];
                  if (!append_mac_id(k)) continue;
                  k = parseInt(k);
                  this_db
                      .getView('document_type',
                               'document_type',
                               { opts : {
                                 reduce : false,
                                 endkey : [k],
                               startkey : [k, {}],
                             descending : true,
                           include_docs : true }
                               }, add_code_from_view_results);
              }
              ard_select.selectmenu('refresh', true);
              $('.all_controls').removeClass('ui-disabled');
            });

      };

      var update_log = function() {
          var log_name = $('.arduino_select :selected').val();
          if (log_name) {
            log_name += '_log';
            var alog = $('.rspy_log', $(thediv));
            if ($('li', alog).length === 0) {
              $('.rspy_log_loading', $(thediv)).show();
            }
            this_db.getDoc(log_name,
              function(e,o) {
                $('.rspy_log_loading', $(thediv)).hide();
                if (!e) {
                  var d = $(':last', $(alog));
                  if (d) { d = d.text(); }
                  var remove_since_date = (new Date((new Date()) - 60000))
                             .toISOString()
                             .replace('T', ' ')
                             .replace('Z', '');
                  o.log.forEach(function(x) {
                    if (d && d !== "" && x[0] <= d) return;
                    if (x[0] <= remove_since_date) return;
                    $('<li/>').html(
                       '<span class="bolded_font">' + x[0] + '</span>' +
                       ' [RSPBY] ' + x[1]).hide().appendTo(alog).slideDown('slow');
                  });
                  var i = 0;
                  $("span", $(alog)).each( function() {
                    if ($(this).text() <= remove_since_date) i += 1;
                    else return false;
                  });
                  // Remove old entries
                  setTimeout( function(remove_num) {
                    var i = remove_num;
                    return function() {
                      $("li", $(alog)).slice(0, i).animate({
                                   height: '0px'
                               }, {
                                   duration: 500,
                                   complete: function() {
                                       $(this).remove();
                                   }
                               });
                  };}(i), 1000);
                } else {
                    alog.empty();
                    alog.append($('<li/>').html(
                       '<span class="bolded_font" style="color:red;">[ Rasp Pi log not found ]</span>'));
                }
                update_timeout = setTimeout(update_log, 5000);
            });
          } else {
            update_timeout = setTimeout(update_log, 5000);
          }
      };

      var add_macid = function(ev) {
          var ins = $('.input_mac').val();
          if (!append_mac_id(ins)) {
              nedm.show_error_window("Bad MAC ID", ins.toString() + " is not recognized as a Raspberry Pi MAC id.");
          } else {
              ard_select.selectmenu('refresh', true);
          }
      };
      var update_current_cmd = function(ev) {
         var o = $(':selected', $(ev.currentTarget));
         var txt = o.val();
         $('.input_cmd', $(thediv)).val(txt);
         if (txt === '""') {
           $('.input_cmd', $(thediv)).removeClass("ui-disabled");
         } else {
           $('.input_cmd', $(thediv)).addClass("ui-disabled");
         }
      };
      var cmd_select = $('.cmd_select', $(thediv)).filter(":input");
      for (var k in docobj.predef_cmds) {
        cmd_select.append($('<option/>')
          .val(JSON.stringify(docobj.predef_cmds[k]))
          .text(k));
      }
      cmd_select.selectmenu("refresh", true);
      $('.arduino_select', $(thediv)).on('change', update_current_code);
      $('.cmd_select', $(thediv)).on('change', update_current_cmd);
      $('.add_new_code', $(thediv)).on('click', add_new_code);
      $('.read_from_db', $(thediv)).on('click', read_from_db);
      $('.submit_new_arduino', $(thediv)).on('click', add_macid);
      $('.send_cmd', $(thediv)).on('click', send_current_command);
      $('.read_from_db', $(thediv)).trigger('click');
      $('.stop_wait', $(thediv)).on('click', function() {
        if (submit_cmd_timeout) clearTimeout(submit_cmd_timeout);
        submit_cmd_timeout = null;
        $('.send_cmd', $(thediv)).removeClass('ui-disabled');
        $('.stop_wait', $(thediv)).addClass('ui-disabled');
      });
      var button_func = function(x) {
         var nm = x;
         return function(ev) {
              var j = $('#arduinosConfirm');
              if (j.data('callback')) {
                  var ret_obj = {};
                  ret_obj[nm] = true;
                  j.data('callback')(ret_obj);
                  j.data({ callback : null });
              }
         };
      };
      ['cancel', 'delete'].forEach(function(o) {
         $('.' + o + '_button', $('#arduinosConfirm')).on('click', button_func(o));
      });
      update_log();
  }"""
}
