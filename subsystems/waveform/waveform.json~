{
  "_id" : "waveform",
  "type" : "control",
  "title" : "Sending a Waveform",
  "description" : "Sending a Waveform",
  "html": """
<h1>Set Parameters</h1>
<table>
	<tr><th>B0 Field in muT (Float)</th><td><input type="text" id="b0_" size="30" /></td></tr>
	<tr><th>First Burst Time (Float)</th> <td><input type="text" id="f_b_t" size="30" /></td></tr>   
	<tr><th>Measuring Time (Float)</th> <td><input type="text" id="m_t" size="30" /></td></tr>   
	<tr><th>Sigma (Float)</th> <td><input type="text" id="s_" size="30" /></td></tr>
	<tr><th>Sampling Frequency (Integer)</th> <td><input type="s_f" id="s_f" size="30" /></td></tr>   
	<tr><th>Length (Integer)</th> <td><input type="text" id="l_" size="30" /> </td></tr>   
</table>
<br /><br />
<button type="button" id="button" size="400">Send</button><br />
<button type="button" id="button2" size="400">Restore Defaults</button>
      
""",
  "script": """
var wsuri = "ws://127.0.0.1:8080/ws";
var send=false;
var measuring_time = "0";
var sig = "1";
var sampling_freq = "100000";
var f_burst_time = "0.5";
var len = "40000";
var b0 = "1.2";
var connection = new autobahn.Connection({
	url: wsuri, 
      	realm: "realm1"
      	});
var send=true;
connection.onopen = function (session, details) 
{
    	console.log("Connected");
      	function on_data (args)
      	{
      		console.log("on_data() event", args[0],args[1],args[2],args[3],args[4], args[5]);
      		
      	}
      	session.subscribe('com.on_data', on_data).then(
      		function (sub) { console.log("subscribed to on_data"); },
      		function (err) { console.log("failed to subscribe to on_data", err); }
      		);
      	
      	t1 = setInterval(function () 
      	{
      		if(send==false)
      			return;
      		session.publish('com.send_data', [b0, f_burst_time, measuring_time, sig, sampling_freq, len]);
            console.log("published to topic 'com.send_data'");
            send = false;
         }, 1000);
      	
      	session.register('com.send_data', send_data).then(
      		function (reg) {console.log("procedure registered");},
      		function (err) {console.log("failed to register", err);}
      		);
}
connection.onClose = function (reason, details)
{
     	console.log("Connection lost: " + reason);
      	if (t1) 
      	{
          	clearInterval(t1);
         	t1 = null;
         }
}
Restore();
connection.open();
     
document.getElementById("button").onclick = OnClick;
     
function OnClick () 
{
     	console.log("button clicked");
      	
      	b0 = document.getElementById("b0_").value;
      	f_burst_time = document.getElementById("f_b_t").value;
      	measuring_time = document.getElementById("m_t").value;
      	sig = document.getElementById("s_").value;
      	sampling_freq = document.getElementById("s_f").value;
      	len = document.getElementById("l_").value;
     	send = true;
}
      
document.getElementById("button2").onclick = Restore;
function Restore() 
{
    	document.getElementById("f_b_t").value = "0.5";
      	document.getElementById("m_t").value = "2";
      	document.getElementById("s_").value = "1";
      	document.getElementById("s_f").value = "100000";
      	document.getElementById("l_").value = "40000";  
      	document.getElementById("b0_").value = "1.2";
      	OnClick(); 
      	send = false;  	
}

"""

}
