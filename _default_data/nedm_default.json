{
  "_id" : "_design/nedm_default",
  "language" : "javascript",
  "access" : {
     "read_only" : false
  },
  "views" : {
     "controls" : {
       "map" : "function(doc) {
           if (!doc.type || doc.type != 'control') return;
           emit(doc._id, null);
        }"
     }
  },
  "filters" : {
    "doc_type" : "function(doc, req) {
        if (doc.type && doc.type == req.query.type) return true;
        return false;
      }"
  },
  "updates" : {
    "insert_with_timestamp" : "function(doc, req) {
        // If it doesn't exist, we are making a new one
        if (!doc) doc = {};
        
        // For documents without uuids
        if (!doc._id) doc._id = req.uuid;
        
        // This would be odd, there should always be a body
        if (!req.body) {
            return [null, JSON.stringify({msg : 'No document to insert', error : true})];
        }
        
        // Pull the information from the body, insert into current document
        _ref = JSON.parse(req.body); 
        for (k in _ref) {
            v = _ref[k];
            doc[k] = v;
        }
        
        var ts  = new Date().toUTCString();
        var user = req.userCtx.name;
        var message = 'insert with user (time): ' + user +
                      ' (' + ts + ')'; 
        
        // Always update the created_by and timestamp
        doc.created_by = user;
        doc.timestamp  = ts;
        return [doc, JSON.stringify({msg : message, id : doc._id, ok : true})]; 
      }"
  },
  "rewrites" : [],
  "validate_doc_update" : "function(newDoc, oldDoc, userCtx, secObj) {
      var ddoc = this;
      
      secObj.admins  = secObj.admins || {};
      secObj.admins.names = secObj.admins.names || [];
      secObj.admins.roles = secObj.admins.roles || [];
      
      var IS_SERVER_ADMIN = false;
      var IS_DB_WRITER = false;
      if(~ userCtx.roles.indexOf('_admin')) {
        IS_SERVER_ADMIN = true;
      }
      if(~ secObj.admins.names.indexOf(userCtx.name)) {
        IS_DB_WRITER = true;
      }
      for(var i = 0; i < userCtx.roles.length; i++) {
        if(~ secObj.admins.roles.indexOf(userCtx.roles[i])) {
          IS_DB_WRITER = true;
        }
      }
      
      if(ddoc.access && ddoc.access.read_only ) {
        if(IS_SERVER_ADMIN) {
          log('Admin change on read-only db: ' + newDoc._id);
        } else {
          throw {'forbidden':'This database is read-only, only may be changed by server admin'};
        }
      }
      if (!IS_SERVER_ADMIN && !IS_DB_WRITER) {
        throw { 'forbidden' : 'Must be a server admin or DB writer' };
      }
      
      //require_field('created_by');
      
      if (newDoc.created_by != userCtx.name && !IS_SERVER_ADMIN) {
        throw { 'forbidden' : 'User may not save as another user' };
      }
      
      function require_field(field) {
        if (!newDoc[field]) throw {'forbidden' : '(' + field + ') is required' };
      }
      
      if (newDoc.timestamp) {
        // ensure that we have an RFC 1132 compliant data string
        var verifyDate = /\\w{3},\\s[0-9]{2}\\s\\w{3}\\s[0-9]{4}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\s\\w{3}/;
        if (verifyDate.exec(newDoc.timestamp) == null) {
            throw {'bad_date_format' : 'Date must be in RFC-1123 format: DAY, DD-MON-YYYY hh:mm:ss GMT'};
        }
      }
      
      // Extra check for data  
      // Ensure that we can actually parse the data.
      if (newDoc.type == 'data') {
          require_field('timestamp');
          var vals = newDoc.value;
          for (var k in vals) {
              if ((typeof vals[k] == 'object') || 
                  (typeof vals[k] == 'string' 
                    && isNaN(parseFloat(vals[k])))) {
                throw { 'cannot_parse' : 'Cannot parse data values to numbers for key (' + k + ')' };
              }
          }
      }
    }" 
}
