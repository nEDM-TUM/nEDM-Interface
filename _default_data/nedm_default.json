{
  "_id" : "_design/nedm_default",
  "language" : "javascript",
  "access" : {
     "read_only" : False
  },
  "filters" : {
    "doc_type" : """function(doc, req) {
        var t;
        try {
          t = JSON.parse(req.query.type);
        } catch (err) {
          t = req.query.type;
        }
        if (!Array.isArray(t)) {
          t = [t];
        }
        if (doc.type && t.indexOf(doc.type.toString()) > -1) return true;
        if (doc._deleted && req.query.handle_deleted) return true;
        return false;
      }"""
  },
  "updates" : {
    "insert_with_timestamp" : """function(doc, req) {
        // If it doesn't exist, we are making a new one
        if (!doc) {
          doc = {};
          if (req.id) {
            doc._id = req.id;
          }
        }

        // For documents without uuids
        if (!doc._id) doc._id = req.uuid;

        // This would be odd, there should always be a body
        if (!req.body) {
            return [null, JSON.stringify({msg : 'No document to insert', error : true})];
        }

        // Pull the information from the body, insert into current document
        _ref = JSON.parse(req.body);
        if (req.query.overwrite) {
            var remove = [];
            for (var k in doc) {
                if (k in { _id : null, _rev : null, _revisions : null}) continue;
                if (!(k in _ref)) remove.push(k);
            }
            for (var i=0;i<remove.length;i++) {
                delete doc[remove[i]];
            }
        }
        for (var j in _ref) {
            doc[j] = _ref[j];
        }

        var ts  = new Date().toUTCString();
        var user = req.userCtx.name;
        var message = 'insert with user (time): ' + user +
                      ' (' + ts + ')';

        // Always update the created_by and timestamp
        if (!doc.created_by) {
          doc.created_by = user;
        }
        doc.timestamp  = ts;
        return [doc, JSON.stringify({msg : message, id : doc._id, ok : true})];
      }""",
    "update_with_log" : """function(doc, req) {
        // The document must exist
        if (!doc) {
            return [null, JSON.stringify({msg : 'No document found', error : true})];
        }
        // This would be odd, there should always be a body
        if (!req.body) {
            return [null, JSON.stringify({msg : 'No document to insert', error : true})];
        }

        // Pull the information from the body, insert into current document
        _ref = JSON.parse(req.body);
        if (!_ref.logids) {
            return [null, JSON.stringify({msg : 'No log field', error : true})];
        }

        var logids = _ref.logids;
        if (!Array.isArray(logids)) {
          logids = [ logids ];
        }
        if (req.query.overwrite || !doc.logids) {
          doc.logids = [];
        }
        for (var i=0;i<logids.length;i++) {
          if (doc.logids.indexOf(logids[i]) < 0) {
            doc.logids.push(logids[i]);
          }
        }

        var message = 'update with log id(s) ' + JSON.stringify(logids);
        return [doc, JSON.stringify({msg : message, id : doc._id, ok : true})];
      }"""
  },
  "rewrites" : [],
  "validate_doc_update" : """function(newDoc, oldDoc, userCtx, secObj) {
      var ddoc = this;

      secObj.admins  = secObj.admins || {};
      secObj.admins.names = secObj.admins.names || [];
      secObj.admins.roles = secObj.admins.roles || [];

      var IS_SERVER_ADMIN = false;
      var IS_DB_WRITER = false;
      var IS_ALARM_WRITER = false;
      var is_alarm_doc = false;

      if(~ userCtx.roles.indexOf('_admin')) {
        IS_SERVER_ADMIN = true;
      }
      if(~ secObj.admins.names.indexOf(userCtx.name)) {
        IS_DB_WRITER = true;
      }
      for(var i = 0; i < userCtx.roles.length; i++) {
        if(~ secObj.admins.roles.indexOf(userCtx.roles[i])) {
          IS_DB_WRITER = true;
        }
        if (userCtx.roles[i] == 'alarm_writer') {
          IS_ALARM_WRITER = true;
        }
      }

      // alarm_writers can change old alarm docs
      if (oldDoc) {
        if (oldDoc.type == 'alarm' && newDoc && newDoc.type == 'alarm') {
          is_alarm_doc = true;
        }
      } else {
        is_alarm_doc = (newDoc.type == 'triggered_alarm');
      }

      if(ddoc.access && ddoc.access.read_only ) {
        if(IS_SERVER_ADMIN) {
          log('Admin change on read-only db: ' + newDoc._id);
        } else {
          throw {'forbidden':'This database is read-only, only may be changed by server admin'};
        }
      }
      if (!IS_SERVER_ADMIN && !IS_DB_WRITER) {
        if (!(IS_ALARM_WRITER && is_alarm_doc)) {
          throw { 'forbidden' : 'Must be a server admin or DB writer' };
        }
      }


      //require_field('created_by');

      if (!IS_SERVER_ADMIN) {
        if (oldDoc) {
          // We are updating an old document...
          if (oldDoc.created_by !== userCtx.name) {
            // First ensure that the user is correct, since we're changing
            throw { 'forbidden' : 'User may not update document from another user' };
          }
          if (!newDoc._deleted && newDoc.created_by !== oldDoc.created_by) {
            // If we're not deleting a document, ensure that the names are not changing
            throw { 'forbidden' : 'User may not change the name of user' };
          }
        } else {
          // This is a new doc
          if (newDoc.created_by !== userCtx.name) {
            throw { 'forbidden' : 'User may not save as another user' };
          }
        }
      }

      function require_field(field) {
        if (!newDoc[field]) throw {'forbidden' : '(' + field + ') is required' };
      }

      if (newDoc.timestamp) {
        // ensure that we have an RFC 1132 compliant data string
        var verifyDate = /\\w{3},\\s[0-9]{2}\\s\\w{3}\\s[0-9]{4}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\s\\w{3}/;
        if (verifyDate.exec(newDoc.timestamp) === null) {
            throw {'bad_date_format' : 'Date must be in RFC-1123 format: DAY, DD-MON-YYYY hh:mm:ss GMT'};
        }
      }

      // Extra check for data
      // Ensure that we can actually parse the data.
      if (newDoc.type == 'data') {
          require_field('timestamp');
          var vals = newDoc.value;
          for (var k in vals) {
              if ((typeof vals[k] == 'object') ||
                  (typeof vals[k] == 'string' && isNaN(parseFloat(vals[k])))) {
                throw { 'cannot_parse' : 'Cannot parse data values to numbers for key (' + k + ')' };
              }
          }
      }
    }"""
}
